version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: kash-mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: kash_db
      MYSQL_USER: kash_user
      MYSQL_PASSWORD: kash_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - kash-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    container_name: kash-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - kash-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: kash-backend
    environment:
      NODE_ENV: development
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: kash_db
      DB_USER: kash_user
      DB_PASSWORD: kash_password
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key
      PORT: 3000
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - kash-network
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      timeout: 5s
      retries: 5

  # Frontend Web App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: kash-frontend
    environment:
      REACT_APP_API_URL: http://localhost:3000
    ports:
      - "8080:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - kash-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: kash-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - kash-network

volumes:
  mysql_data:
  redis_data:

networks:
  kash-network:
    driver: bridge