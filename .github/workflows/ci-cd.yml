name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Build and Test Backend
  backend-ci:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run backend linting
      working-directory: ./backend
      run: npm run lint

    - name: Run backend type checking
      working-directory: ./backend
      run: npx tsc --noEmit

    - name: Run backend tests
      working-directory: ./backend
      run: npm test
      env:
        NODE_ENV: test

    - name: Generate test coverage
      working-directory: ./backend
      run: npm run test:coverage

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./backend/coverage
        flags: backend

  # Job 2: Build and Test Frontend
  frontend-ci:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run frontend type checking
      working-directory: ./frontend
      run: npx tsc --noEmit

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test

    - name: Build frontend for production
      working-directory: ./frontend
      run: npm run build

  # Job 3: Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Audit backend dependencies
      working-directory: ./backend
      run: npm audit

    - name: Audit frontend dependencies
      working-directory: ./frontend
      run: npm audit

  # Job 4: Docker Build and Push
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/kash-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/kash-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/kash-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/kash-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 5: Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Here you would add your deployment commands
        # For example: kubectl apply -f k8s/staging/
        # or: docker-compose -f docker-compose.staging.yml up -d

  # Job 6: Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run integration tests
      run: |
        echo "Running integration tests against staging..."
        # Add your integration test commands here
        # For example: npm run test:integration

  # Job 7: Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Here you would add your production deployment commands
        # For example: kubectl apply -f k8s/production/
        
    - name: Health check
      run: |
        echo "Performing health check..."
        # Add health check commands here
        
    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, rolling back..."
        # Add rollback commands here